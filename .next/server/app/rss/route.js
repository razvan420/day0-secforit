/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/rss/route";
exports.ids = ["app/rss/route"];
exports.modules = {

/***/ "(rsc)/./app/rss/route.ts":
/*!**************************!*\
  !*** ./app/rss/route.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   HEAD: () => (/* binding */ HEAD)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Enhanced vulnerability sources with multiple intelligence feeds\nconst VULNERABILITY_SOURCES = [\n    {\n        name: 'CISA KEV',\n        url: 'https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json',\n        type: 'json'\n    },\n    {\n        name: 'NVD Recent',\n        url: 'https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=20&startIndex=0',\n        type: 'json'\n    },\n    {\n        name: 'GitHub Security',\n        url: 'https://api.github.com/advisories?per_page=15&sort=published&direction=desc',\n        type: 'json'\n    }\n];\nasync function fetchCISAVulnerabilities() {\n    try {\n        const source = VULNERABILITY_SOURCES[0];\n        if (!source) throw new Error('CISA source configuration not found');\n        const response = await fetch(source.url, {\n            next: {\n                revalidate: 1800\n            } // Cache for 30 minutes\n        });\n        if (!response.ok) throw new Error('Failed to fetch CISA data');\n        const data = await response.json();\n        // Get recent vulnerabilities (last 60 days)\n        const sixtyDaysAgo = new Date();\n        sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\n        return data.vulnerabilities?.filter((vuln)=>new Date(vuln.dateAdded) > sixtyDaysAgo).slice(0, 15).map((vuln)=>({\n                id: vuln.cveID || `cisa-${Date.now()}-${Math.random()}`,\n                title: `${vuln.cveID}: ${vuln.vulnerabilityName}`,\n                description: `${vuln.shortDescription} | Product: ${vuln.product} | Vendor: ${vuln.vendorProject}`,\n                severity: 'Critical',\n                published: vuln.dateAdded,\n                updated: vuln.dateAdded,\n                source: 'CISA Known Exploited Vulnerabilities',\n                link: `https://nvd.nist.gov/vuln/detail/${vuln.cveID}`,\n                cveId: vuln.cveID,\n                product: vuln.product,\n                vendor: vuln.vendorProject,\n                exploitAvailable: true\n            })) || [];\n    } catch (error) {\n        console.error('Error fetching CISA vulnerabilities:', error);\n        return [];\n    }\n}\nasync function fetchNVDVulnerabilities() {\n    try {\n        const source = VULNERABILITY_SOURCES[1];\n        if (!source) throw new Error('NVD source configuration not found');\n        const response = await fetch(source.url, {\n            next: {\n                revalidate: 1800\n            },\n            headers: {\n                'User-Agent': 'ZeroDayRSSFeed/1.0'\n            }\n        });\n        if (!response.ok) throw new Error('Failed to fetch NVD data');\n        const data = await response.json();\n        return data.vulnerabilities?.filter((item)=>{\n            const vuln = item.cve;\n            const cvssScore = vuln.metrics?.cvssMetricV31?.[0]?.cvssData?.baseScore || vuln.metrics?.cvssMetricV30?.[0]?.cvssData?.baseScore;\n            const publishedDate = new Date(vuln.published);\n            const tenDaysAgo = new Date();\n            tenDaysAgo.setDate(tenDaysAgo.getDate() - 10);\n            return cvssScore >= 7.0 && publishedDate > tenDaysAgo;\n        }).slice(0, 10).map((item)=>{\n            const vuln = item.cve;\n            const description = vuln.descriptions?.find((d)=>d.lang === 'en')?.value || 'No description available';\n            const cvssScore = vuln.metrics?.cvssMetricV31?.[0]?.cvssData?.baseScore || vuln.metrics?.cvssMetricV30?.[0]?.cvssData?.baseScore;\n            return {\n                id: vuln.id,\n                title: `${vuln.id}: High/Critical Severity Vulnerability`,\n                description: description,\n                severity: cvssScore >= 9 ? 'Critical' : cvssScore >= 7 ? 'High' : cvssScore >= 4 ? 'Medium' : 'Low',\n                published: vuln.published,\n                updated: vuln.lastModified,\n                source: 'National Vulnerability Database',\n                link: `https://nvd.nist.gov/vuln/detail/${vuln.id}`,\n                cveId: vuln.id,\n                cvssScore: cvssScore,\n                exploitAvailable: false\n            };\n        }) || [];\n    } catch (error) {\n        console.error('Error fetching NVD vulnerabilities:', error);\n        return [];\n    }\n}\nasync function fetchGitHubVulnerabilities() {\n    try {\n        const source = VULNERABILITY_SOURCES[2];\n        if (!source) throw new Error('GitHub source configuration not found');\n        const response = await fetch(source.url, {\n            next: {\n                revalidate: 1800\n            },\n            headers: {\n                'User-Agent': 'ZeroDayRSSFeed/1.0',\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        });\n        if (!response.ok) throw new Error('Failed to fetch GitHub data');\n        const data = await response.json();\n        return data?.filter((advisory)=>advisory.severity === 'critical' || advisory.severity === 'high').slice(0, 8).map((advisory)=>({\n                id: advisory.ghsa_id,\n                title: `${advisory.ghsa_id}: ${advisory.summary}`,\n                description: advisory.description || 'No description available',\n                severity: advisory.severity === 'critical' ? 'Critical' : 'High',\n                published: advisory.published_at,\n                updated: advisory.updated_at,\n                source: 'GitHub Security Advisories',\n                link: advisory.html_url,\n                cveId: advisory.cve_id,\n                exploitAvailable: false\n            })) || [];\n    } catch (error) {\n        console.error('Error fetching GitHub vulnerabilities:', error);\n        return [];\n    }\n}\nasync function fetchEPSSScores(cveIds) {\n    try {\n        if (cveIds.length === 0) return {};\n        const cveQuery = cveIds.slice(0, 10).join(','); // Limit to 10 CVEs\n        const response = await fetch(`https://api.first.org/data/v1/epss?cve=${cveQuery}`, {\n            next: {\n                revalidate: 86400\n            },\n            headers: {\n                'User-Agent': 'ZeroDayRSSFeed/1.0'\n            }\n        });\n        if (!response.ok) return {};\n        const data = await response.json();\n        const scores = {};\n        data.data?.forEach((item)=>{\n            if (item.cve && item.epss) {\n                scores[item.cve] = parseFloat(item.epss);\n            }\n        });\n        return scores;\n    } catch (error) {\n        console.error('Error fetching EPSS scores:', error);\n        return {};\n    }\n}\nasync function getAllVulnerabilities() {\n    const [cisaVulns, nvdVulns, githubVulns] = await Promise.all([\n        fetchCISAVulnerabilities(),\n        fetchNVDVulnerabilities(),\n        fetchGitHubVulnerabilities()\n    ]);\n    // Combine and sort by published date (newest first)\n    const allVulns = [\n        ...cisaVulns,\n        ...nvdVulns,\n        ...githubVulns\n    ];\n    const sortedVulns = allVulns.sort((a, b)=>new Date(b.published).getTime() - new Date(a.published).getTime());\n    // Enhance with EPSS scores\n    const cveIds = sortedVulns.map((v)=>v.cveId).filter(Boolean);\n    const epssScores = await fetchEPSSScores(cveIds);\n    return sortedVulns.map((vuln)=>({\n            ...vuln,\n            epssScore: vuln.cveId ? epssScores[vuln.cveId] : undefined\n        }));\n}\nfunction generateRSSFeed(vulnerabilities) {\n    const now = new Date().toUTCString();\n    const baseUrl = \"http://localhost:3000\" || 0;\n    const rssItems = vulnerabilities.map((vuln)=>`\n    <item>\n      <title><![CDATA[${vuln.title}]]></title>\n      <description><![CDATA[\n        <p><strong>Severity:</strong> ${vuln.severity}</p>\n        <p><strong>Source:</strong> ${vuln.source}</p>\n        ${vuln.cvssScore ? `<p><strong>CVSS Score:</strong> ${vuln.cvssScore}</p>` : ''}\n        ${vuln.epssScore ? `<p><strong>EPSS Score:</strong> ${(vuln.epssScore * 100).toFixed(1)}% (probability of exploitation)</p>` : ''}\n        ${vuln.exploitAvailable ? `<p><strong>⚠️ ACTIVELY EXPLOITED:</strong> This vulnerability is being actively exploited in the wild</p>` : ''}\n        <p><strong>Description:</strong></p>\n        <p>${vuln.description}</p>\n        <p><a href=\"${vuln.link}\" target=\"_blank\">View Full Details</a></p>\n      ]]></description>\n      <link>${vuln.link}</link>\n      <guid isPermaLink=\"false\">${vuln.id}</guid>\n      <pubDate>${new Date(vuln.published).toUTCString()}</pubDate>\n      <category>${vuln.severity}</category>\n      ${vuln.exploitAvailable ? '<category>Actively Exploited</category>' : ''}\n      ${vuln.cveId ? `<category>${vuln.cveId}</category>` : ''}\n      <source url=\"${vuln.link}\">${vuln.source}</source>\n    </item>\n  `).join('');\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n  <channel>\n    <title>Zero-Day Intelligence Feed</title>\n    <description>Real-time zero-day and critical vulnerability intelligence from CISA KEV, NVD, and GitHub Security Advisories with EPSS exploitation probability scoring</description>\n    <link>${baseUrl}</link>\n    <atom:link href=\"${baseUrl}/rss\" rel=\"self\" type=\"application/rss+xml\" />\n    <language>en-us</language>\n    <lastBuildDate>${now}</lastBuildDate>\n    <pubDate>${now}</pubDate>\n    <ttl>30</ttl>\n    <generator>ZeroDay Intelligence RSS Feed v2.0</generator>\n    <webMaster>security@example.com (Security Team)</webMaster>\n    <managingEditor>security@example.com (Security Team)</managingEditor>\n    <category>Security</category>\n    <category>Vulnerabilities</category>\n    <category>Zero-Day</category>\n    <category>Threat Intelligence</category>\n    <image>\n      <url>${baseUrl}/security-icon.png</url>\n      <title>Zero-Day Intelligence Feed</title>\n      <link>${baseUrl}</link>\n      <width>144</width>\n      <height>144</height>\n    </image>\n    ${rssItems}\n  </channel>\n</rss>`;\n}\nasync function GET(request) {\n    try {\n        console.log('Generating enhanced RSS feed with threat intelligence...');\n        const vulnerabilities = await getAllVulnerabilities();\n        if (vulnerabilities.length === 0) {\n            console.warn('No vulnerabilities found, generating empty feed');\n        }\n        const rssContent = generateRSSFeed(vulnerabilities);\n        // Enhanced headers with vulnerability metrics\n        const cisaCount = vulnerabilities.filter((v)=>v.source.includes('CISA')).length;\n        const nvdCount = vulnerabilities.filter((v)=>v.source.includes('NVD')).length;\n        const githubCount = vulnerabilities.filter((v)=>v.source.includes('GitHub')).length;\n        const exploitedCount = vulnerabilities.filter((v)=>v.exploitAvailable).length;\n        const criticalCount = vulnerabilities.filter((v)=>v.severity === 'Critical').length;\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(rssContent, {\n            status: 200,\n            headers: {\n                'Content-Type': 'application/rss+xml; charset=utf-8',\n                'Cache-Control': 'public, max-age=1800, stale-while-revalidate=3600',\n                'X-Total-Vulnerabilities': vulnerabilities.length.toString(),\n                'X-CISA-Count': cisaCount.toString(),\n                'X-NVD-Count': nvdCount.toString(),\n                'X-GitHub-Count': githubCount.toString(),\n                'X-Exploited-Count': exploitedCount.toString(),\n                'X-Critical-Count': criticalCount.toString(),\n                'X-Feed-Version': '2.0',\n                'X-Last-Updated': new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('Error generating RSS feed:', error);\n        // Return a minimal error feed\n        const errorFeed = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\">\n  <channel>\n    <title>Zero-Day Intelligence Feed - Error</title>\n    <description>Error occurred while fetching vulnerability data</description>\n    <link>${\"http://localhost:3000\" || 0}</link>\n    <item>\n      <title>RSS Feed Error</title>\n      <description>Unable to fetch vulnerability data at this time. Please try again later.</description>\n      <pubDate>${new Date().toUTCString()}</pubDate>\n    </item>\n  </channel>\n</rss>`;\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(errorFeed, {\n            status: 500,\n            headers: {\n                'Content-Type': 'application/rss+xml; charset=utf-8'\n            }\n        });\n    }\n}\n// Health check endpoint\nasync function HEAD(request) {\n    try {\n        const vulnerabilities = await getAllVulnerabilities();\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n            status: 200,\n            headers: {\n                'X-Total-Vulnerabilities': vulnerabilities.length.toString(),\n                'X-Last-Updated': new Date().toISOString(),\n                'Cache-Control': 'public, max-age=300'\n            }\n        });\n    } catch (error) {\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n            status: 503,\n            headers: {\n                'X-Error': 'Service temporarily unavailable'\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/rss/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Frss%2Froute&page=%2Frss%2Froute&appPaths=&pagePath=private-next-app-dir%2Frss%2Froute.ts&appDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Frss%2Froute&page=%2Frss%2Froute&appPaths=&pagePath=private-next-app-dir%2Frss%2Froute.ts&appDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_razvan_Documents_Personale_SECFORIT_2_day0_app_rss_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/rss/route.ts */ \"(rsc)/./app/rss/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/rss/route\",\n        pathname: \"/rss\",\n        filename: \"route\",\n        bundlePath: \"app/rss/route\"\n    },\n    resolvedPagePath: \"/Users/razvan/Documents/Personale/SECFORIT 2/day0/app/rss/route.ts\",\n    nextConfigOutput,\n    userland: _Users_razvan_Documents_Personale_SECFORIT_2_day0_app_rss_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZyc3MlMkZyb3V0ZSZwYWdlPSUyRnJzcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRnJzcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJhenZhbiUyRkRvY3VtZW50cyUyRlBlcnNvbmFsZSUyRlNFQ0ZPUklUJTIwMiUyRmRheTAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcmF6dmFuJTJGRG9jdW1lbnRzJTJGUGVyc29uYWxlJTJGU0VDRk9SSVQlMjAyJTJGZGF5MCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDa0I7QUFDL0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yYXp2YW4vRG9jdW1lbnRzL1BlcnNvbmFsZS9TRUNGT1JJVCAyL2RheTAvYXBwL3Jzcy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9yc3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL3Jzc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9yc3Mvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvcmF6dmFuL0RvY3VtZW50cy9QZXJzb25hbGUvU0VDRk9SSVQgMi9kYXkwL2FwcC9yc3Mvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Frss%2Froute&page=%2Frss%2Froute&appPaths=&pagePath=private-next-app-dir%2Frss%2Froute.ts&appDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Frss%2Froute&page=%2Frss%2Froute&appPaths=&pagePath=private-next-app-dir%2Frss%2Froute.ts&appDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frazvan%2FDocuments%2FPersonale%2FSECFORIT%202%2Fday0&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();