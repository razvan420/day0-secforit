{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/razvan/Documents/Personale/SECFORIT%202/day0/app/rss/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\ninterface Vulnerability {\n  id: string;\n  title: string;\n  description: string;\n  severity: string;\n  published: string;\n  updated: string;\n  source: string;\n  link: string;\n  cveId?: string;\n  cvssScore?: number;\n}\n\n// Official sources for vulnerability data\nconst VULNERABILITY_SOURCES = [\n  {\n    name: 'CISA KEV',\n    url: 'https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json',\n    type: 'json'\n  },\n  {\n    name: 'NVD Recent',\n    url: 'https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=20&startIndex=0',\n    type: 'json'\n  }\n];\n\nasync function fetchCISAVulnerabilities(): Promise<Vulnerability[]> {\n  try {\n    const response = await fetch(VULNERABILITY_SOURCES[0].url, {\n      next: { revalidate: 3600 } // Cache for 1 hour\n    });\n    \n    if (!response.ok) throw new Error('Failed to fetch CISA data');\n    \n    const data = await response.json();\n    \n    return data.vulnerabilities?.slice(0, 10).map((vuln: any) => ({\n      id: vuln.cveID || `cisa-${Date.now()}-${Math.random()}`,\n      title: `${vuln.cveID}: ${vuln.vulnerabilityName}`,\n      description: `${vuln.shortDescription} | Product: ${vuln.product} | Vendor: ${vuln.vendorProject}`,\n      severity: 'Critical',\n      published: vuln.dateAdded,\n      updated: vuln.dateAdded,\n      source: 'CISA Known Exploited Vulnerabilities',\n      link: `https://nvd.nist.gov/vuln/detail/${vuln.cveID}`,\n      cveId: vuln.cveID\n    })) || [];\n  } catch (error) {\n    console.error('Error fetching CISA vulnerabilities:', error);\n    return [];\n  }\n}\n\nasync function fetchNVDVulnerabilities(): Promise<Vulnerability[]> {\n  try {\n    const response = await fetch(VULNERABILITY_SOURCES[1].url, {\n      next: { revalidate: 3600 },\n      headers: {\n        'User-Agent': 'ZeroDayRSSFeed/1.0'\n      }\n    });\n    \n    if (!response.ok) throw new Error('Failed to fetch NVD data');\n    \n    const data = await response.json();\n    \n    return data.vulnerabilities?.slice(0, 10).map((item: any) => {\n      const vuln = item.cve;\n      const description = vuln.descriptions?.find((d: any) => d.lang === 'en')?.value || 'No description available';\n      const cvssScore = vuln.metrics?.cvssMetricV31?.[0]?.cvssData?.baseScore || \n                       vuln.metrics?.cvssMetricV30?.[0]?.cvssData?.baseScore;\n      \n      return {\n        id: vuln.id,\n        title: `${vuln.id}: ${description.substring(0, 100)}...`,\n        description: description,\n        severity: cvssScore >= 9 ? 'Critical' : cvssScore >= 7 ? 'High' : cvssScore >= 4 ? 'Medium' : 'Low',\n        published: vuln.published,\n        updated: vuln.lastModified,\n        source: 'National Vulnerability Database',\n        link: `https://nvd.nist.gov/vuln/detail/${vuln.id}`,\n        cveId: vuln.id,\n        cvssScore: cvssScore\n      };\n    }) || [];\n  } catch (error) {\n    console.error('Error fetching NVD vulnerabilities:', error);\n    return [];\n  }\n}\n\nasync function getAllVulnerabilities(): Promise<Vulnerability[]> {\n  const [cisaVulns, nvdVulns] = await Promise.all([\n    fetchCISAVulnerabilities(),\n    fetchNVDVulnerabilities()\n  ]);\n  \n  const allVulns = [...cisaVulns, ...nvdVulns];\n  return allVulns.sort((a, b) => new Date(b.published).getTime() - new Date(a.published).getTime());\n}\n\nfunction generateRSSFeed(vulnerabilities: Vulnerability[]): string {\n  const now = new Date().toUTCString();\n  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n  \n  const rssItems = vulnerabilities.map(vuln => `\n    <item>\n      <title><![CDATA[${vuln.title}]]></title>\n      <description><![CDATA[\n        <p><strong>Severity:</strong> ${vuln.severity}</p>\n        <p><strong>Source:</strong> ${vuln.source}</p>\n        ${vuln.cvssScore ? `<p><strong>CVSS Score:</strong> ${vuln.cvssScore}</p>` : ''}\n        <p><strong>Description:</strong></p>\n        <p>${vuln.description}</p>\n        <p><a href=\"${vuln.link}\" target=\"_blank\">View Full Details</a></p>\n      ]]></description>\n      <link>${vuln.link}</link>\n      <guid isPermaLink=\"false\">${vuln.id}</guid>\n      <pubDate>${new Date(vuln.published).toUTCString()}</pubDate>\n      <category>${vuln.severity}</category>\n      <source url=\"${vuln.link}\">${vuln.source}</source>\n    </item>\n  `).join('');\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>Zero-Day Vulnerabilities Feed</title>\n    <description>Latest zero-day and critical vulnerabilities from official security sources</description>\n    <link>${baseUrl}/rss</link>\n    <atom:link href=\"${baseUrl}/rss\" rel=\"self\" type=\"application/rss+xml\" />\n    <language>en-us</language>\n    <lastBuildDate>${now}</lastBuildDate>\n    <pubDate>${now}</pubDate>\n    <ttl>60</ttl>\n    ${rssItems}\n  </channel>\n</rss>`;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const vulnerabilities = await getAllVulnerabilities();\n    const rssContent = generateRSSFeed(vulnerabilities);\n    \n    return new NextResponse(rssContent, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/rss+xml; charset=utf-8',\n        'Cache-Control': 'public, max-age=3600',\n      }\n    });\n  } catch (error) {\n    console.error('Error generating RSS feed:', error);\n    return new NextResponse('Error generating feed', { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}